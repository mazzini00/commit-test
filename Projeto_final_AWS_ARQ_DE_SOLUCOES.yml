Parameters:
  ## Escolhendo a keypair ##
  myKeyPair:
    Description: Amazon EC2 Key Pair 
    Type: AWS::EC2::KeyPair::KeyName
  ## Dando um nome ao ambiente ##
  EnvironmentName:
    Type: String
    Default: trabalhofinalAWS
## Automatizando a escolha da imagem ##
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-1853ac65
    us-west-1:
      AMI: ami-bf5540df
    eu-west-1:
      AMI: ami-3bfab942
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721    
Resources: 
  ## Criando o VPC ##
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}
  ## Criando o Internet Gateway ##
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:  
            Fn::Sub: ${EnvironmentName}  
  ## Anexando o Internet Gateway ao VPC ##
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  ## Criando a tabela de rotas para subnets publicas ##
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:  ${EnvironmentName} Public Routes
  ## Criando a rota default ##
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  ## Associando a tabela de rotas com a primeira subnet publica ##
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  ## Criando a primeira subnet publica ##
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      ## Importante apontar a AZ para quando for associar as ASG e o ALB ##
      AvailabilityZone: us-east-1a   
      CidrBlock: 172.16.1.0/28
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ1)
  ## Associando a tabela de rotas com a segunda subnet publica ##
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  ## Criando a segunda subnet publica ##
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      ## Importante apontar a AZ para quando for associar as ASG e o ALB ##
      AvailabilityZone: us-east-1b   
      CidrBlock: 172.16.15.0/28
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName} Public Subnet (AZ2)
  LoadBalancer: ## Criando o Application Load Balancer ##
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      ## As subnets devem estar criadas conforme o apontado, contendo a AZ ##
      Subnets:
       - Ref: PublicSubnet1
       - Ref: PublicSubnet2
  
  LoadBalancerListener: ## Porta 80 Listener for ALB ##
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VPC
  ## Criando o ASG ##
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: ## Importante incluir as AZs ##
        - us-east-1a
        - us-east-1b
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:  ## Importante incluir as subnets aqui! ##
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
  ## Criando a launchconfiguration ##
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install php and httpd
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php echo gethostname(); ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    ## Ajustando as propriedades das instancias ##
    Properties:
      KeyName: !Ref myKeyPair
      InstanceType: t2.small
      SecurityGroups:
        - !Ref EC2SecurityGroup
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # Ensure AWS CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
  ## Grupo de Seguranca do ALB ##
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ## Grupo de seguranca para as instancias ##
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: EC2 Instance
  EC2InboundRule: ## EC2 can only accept traffic from ALB ##
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId
## Saidas ##
Outputs:
  PublicDns:
    Description: The Public DNS
    Value: !Sub 'http://${LoadBalancer.DNSName}'